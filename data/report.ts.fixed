import { db } from "@/lib/db";
import { ReportStatus } from "@prisma/client";
import { ReportCreateInput, ReportUpdateInput } from "@/schemas/report";

/**
 * Create a new report
 */
export async function createReport(data: ReportCreateInput, userId: string) {
  return db.report.create({
    data: {
      ...data,
      userId,
    },
    include: {
      user: {
        select: {
          id: true,
          firstName: true,
          lastName: true,
          email: true,
        },
      },
      expenses: true,
    },
  });
}

/**
 * Get all reports with optional filtering
 */
export async function getReports(
  userId: string,
  {
    page = 1,
    pageSize = 10,
    status,
    search,
    startDate,
    endDate,
  }: {
    page?: number;
    pageSize?: number;
    status?: ReportStatus;
    search?: string;
    startDate?: Date;
    endDate?: Date;
  } = {}
) {
  // Calculate pagination
  const skip = (page - 1) * pageSize;

  // Build where clause
  const where: any = { userId };

  // Add filters if provided
  if (status) {
    where.status = status;
  }

  if (search) {
    where.OR = [
      { title: { contains: search, mode: "insensitive" } },
      { description: { contains: search, mode: "insensitive" } },
    ];
  }

  if (startDate) {
    where.createdAt = { ...(where.createdAt || {}), gte: startDate };
  }

  if (endDate) {
    where.createdAt = { ...(where.createdAt || {}), lte: endDate };
  }

  // Get total count
  const totalCount = await db.report.count({ where });

  // Get paginated reports
  const reports = await db.report.findMany({
    where,
    include: {
      user: {
        select: {
          id: true,
          firstName: true,
          lastName: true,
          email: true,
        },
      },
      expenses: {
        select: {
          id: true,
          amount: true,
          merchant: true,
          category: true,
        },
      },
      approver: {
        select: {
          id: true,
          firstName: true,
          lastName: true,
          email: true,
        },
      },
    },
    orderBy: {
      createdAt: "desc",
    },
    skip,
    take: pageSize,
  });

  return {
    data: reports,
    meta: {
      totalCount,
      page,
      pageSize,
      pageCount: Math.ceil(totalCount / pageSize),
    },
  };
}

/**
 * Get a report by ID
 */
export async function getReportById(id: number, userId?: string) {
  const where: any = { id };
  
  // If userId is provided, ensure the report belongs to the user
  if (userId) {
    where.userId = userId;
  }

  return db.report.findUnique({
    where,
    include: {
      user: {
        select: {
          id: true,
          firstName: true,
          lastName: true,
          email: true,
        },
      },
      expenses: {
        include: {
          user: {
            select: {
              id: true,
              firstName: true,
              lastName: true,
              email: true,
            },
          },
        },
      },
      approver: {
        select: {
          id: true,
          firstName: true,
          lastName: true,
          email: true,
        },
      },
    },
  });
}

/**
 * Update a report
 */
export async function updateReport(id: number, data: ReportUpdateInput, userId?: string) {
  const where: any = { id };
  
  // If userId is provided, ensure the report belongs to the user
  if (userId) {
    where.userId = userId;
  }

  return db.report.update({
    where,
    data,
    include: {
      user: {
        select: {
          id: true,
          firstName: true,
          lastName: true,
          email: true,
        },
      },
      expenses: true,
      approver: {
        select: {
          id: true,
          firstName: true,
          lastName: true,
          email: true,
        },
      },
    },
  });
}

/**
 * Delete a report
 */
export async function deleteReport(id: number, userId?: string) {
  const where: any = { id };
  
  // If userId is provided, ensure the report belongs to the user
  if (userId) {
    where.userId = userId;
  }

  return db.report.delete({
    where,
  });
}

/**
 * Add expenses to a report
 */
export async function addExpensesToReport(reportId: number, expenseIds: number[]) {
  // Update each expense to associate with the report
  const updatePromises = expenseIds.map((expenseId) =>
    db.expense.update({
      where: { id: expenseId },
      data: {
        reportId,
        status: "REPORTED",
      },
    })
  );

  // Execute all updates in parallel
  await Promise.all(updatePromises);

  // Recalculate the total amount for the report
  const expenses = await db.expense.findMany({
    where: { reportId },
    select: { amount: true },
  });

  const totalAmount = expenses.reduce((sum, expense) => sum + expense.amount, 0);

  // Update the report with the new total
  return db.report.update({
    where: { id: reportId },
    data: { totalAmount },
    include: {
      expenses: true,
    },
  });
}

/**
 * Remove expenses from a report
 */
export async function removeExpensesFromReport(reportId: number, expenseIds: number[]) {
  // Update each expense to disassociate from the report
  const updatePromises = expenseIds.map((expenseId) =>
    db.expense.update({
      where: { id: expenseId },
      data: {
        reportId: null,
        status: "UNREPORTED",
      },
    })
  );

  // Execute all updates in parallel
  await Promise.all(updatePromises);

  // Recalculate the total amount for the report
  const expenses = await db.expense.findMany({
    where: { reportId },
    select: { amount: true },
  });

  const totalAmount = expenses.reduce((sum, expense) => sum + expense.amount, 0);

  // Update the report with the new total
  return db.report.update({
    where: { id: reportId },
    data: { totalAmount },
    include: {
      expenses: true,
    },
  });
}

/**
 * Submit a report for approval
 */
export async function submitReport(id: number, userId: string) {
  return db.report.update({
    where: { id, userId },
    data: {
      status: "PENDING",
      submittedAt: new Date(),
    },
  });
}

/**
 * Approve a report
 */
export async function approveReport(id: number, approverUserId: string) {
  return db.report.update({
    where: { id },
    data: {
      status: "APPROVED",
      approvedAt: new Date(),
      approvedById: approverUserId,
    },
  });
}

/**
 * Reject a report
 */
export async function rejectReport(id: number, approverUserId: string) {
  return db.report.update({
    where: { id },
    data: {
      status: "REJECTED",
      rejectedAt: new Date(),
      approvedById: approverUserId,
    },
  });
}

/**
 * Record reimbursement for a report
 */
export async function recordReimbursement(
  id: number,
  data: {
    reimbursementMethod: string;
    reimbursementRef?: string;
    reimbursementNotes?: string;
  }
) {
  return db.report.update({
    where: { id },
    data: {
      status: "REIMBURSED",
      reimbursedAt: new Date(),
      ...data,
    },
  });
}
